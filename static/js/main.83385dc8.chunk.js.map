{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","useEffect","Tabletop","init","key","simpleSheet","then","catch","err","console","warn","window","onload","log","document","getElementById","style","display","className","onClick","Recipe","RandomRecipe","Math","floor","random","length","innerHTML","Name","Link","Image","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2PAsDeA,MAlDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACJC,EADI,KACEC,EADF,KAmCX,OAhCAC,qBAAU,WACNC,IAASC,KAAK,CACVC,IAAK,+CACLC,aAAa,IAEZC,MAAK,SAACP,GAAD,OAAUC,EAAQD,MACvBQ,OAAM,SAACC,GAAD,OAASC,QAAQC,KAAKF,QAClC,IAoBHG,OAAOC,OAAS,WACZH,QAAQI,IAAI,WACZC,SAASC,eAAe,QAAQC,MAAMC,QAAU,QAIhD,sBAAKC,UAAU,YAAf,UACI,oBAAIA,UAAU,QAAd,qCACA,qBAAKC,QA1Bb,WACI,IAAMC,EAASrB,EACTsB,EAAeD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SAC9DX,SAASC,eAAe,cAAcW,UAAYL,EAAaM,KAC/Db,SAASC,eAAe,cAAcW,UAAY,YAAcL,EAAaO,KAAO,qCACpFd,SAASC,eAAe,eAAeW,UAAY,aAAeL,EAAaQ,MAAQ,0BACvFf,SAASC,eAAe,aAAaC,MAAMC,QAAU,OACrDH,SAASC,eAAe,QAAQC,MAAMC,QAAU,QAmBNC,UAAU,YAAYY,GAAG,YAA/D,SACI,8CAEJ,oBAAIA,GAAG,eACP,mBAAGA,GAAG,eACN,qBAAKA,GAAG,gBACR,qBAAKA,GAAG,OAAOX,QAtBvB,WACI,IAAMC,EAASrB,EACTsB,EAAeD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SAC9DX,SAASC,eAAe,cAAcW,UAAYL,EAAaM,KAC/Db,SAASC,eAAe,cAAcW,UAAY,YAAcL,EAAaO,KAAO,qCACpFd,SAASC,eAAe,eAAeW,UAAY,aAAeL,EAAaQ,MAAQ,2BAiB3CX,UAAU,cAAlD,SACI,4CCrCDa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.83385dc8.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Tabletop from \"tabletop\";\nimport \"./App.css\";\n\nfunction App() {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        Tabletop.init({\n            key: \"1wf_6Dok_yo5qJt6InaVF6UVisDTeh7J-BOi2dxOaBEo\",\n            simpleSheet: true,\n        })\n            .then((data) => setData(data))\n            .catch((err) => console.warn(err));\n    }, []);\n\n    function InitialGeneratedRecipe() {\n        const Recipe = data;\n        const RandomRecipe = Recipe[Math.floor(Math.random() * Recipe.length)];\n        document.getElementById(\"RecipeName\").innerHTML = RandomRecipe.Name;\n        document.getElementById(\"RecipeLink\").innerHTML = \"<a href='\" + RandomRecipe.Link + \"' target='_blank';>Recipe Link</a>\";\n        document.getElementById(\"RecipeImage\").innerHTML = \"<img src='\" + RandomRecipe.Image + \"' class='recipeImage'/>\";\n        document.getElementById(\"BigButton\").style.display = \"none\";\n        document.getElementById(\"test\").style.display = \"flex\";\n    }\n\n    function GenerateRecipe() {\n        const Recipe = data;\n        const RandomRecipe = Recipe[Math.floor(Math.random() * Recipe.length)];\n        document.getElementById(\"RecipeName\").innerHTML = RandomRecipe.Name;\n        document.getElementById(\"RecipeLink\").innerHTML = \"<a href='\" + RandomRecipe.Link + \"' target='_blank';>Recipe Link</a>\";\n        document.getElementById(\"RecipeImage\").innerHTML = \"<img src='\" + RandomRecipe.Image + \"' class='recipeImage'/>\";\n    }\n\n    window.onload = function () {\n        console.log(\"testing\");\n        document.getElementById(\"test\").style.display = \"none\";\n    };\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">Random Recipe Generator</h1>\n            <div onClick={InitialGeneratedRecipe} className=\"buttonBig\" id=\"BigButton\">\n                <h2>Click Here</h2>\n            </div>\n            <h3 id=\"RecipeName\"></h3>\n            <p id=\"RecipeLink\"></p>\n            <div id=\"RecipeImage\"></div>\n            <div id=\"test\" onClick={GenerateRecipe} className=\"buttonSmall\">\n                <h3>Next</h3>\n            </div>\n        </div>\n    );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}